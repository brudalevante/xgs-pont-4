# Reglas personalizadas para autobuild OpenWrt (w-rules)
# Añade aquí todos los paquetes, hooks y funciones necesarias para tu compilación personalizada

# Añadir hooks personalizados al autobuild
list_add_after $(hooks autobuild_prepare) platform_change_kernel_config filogic_change_kernel_config
list_add_after $(hooks autobuild_prepare) copy_global_files copy_optee_files
list_add_after $(hooks do_build) download_openwrt_packages airoha_firmware_install

# Eliminar paquetes de crypto para evitar warnings de dependencias si no es build interno
if [ -z ${internal_build} ]; then
	list_prepend $(hooks autobuild_prepare) remove_crypto_package
fi

# Habilitar funciones adicionales según flags
if test x"${hqa_set}" == x"yes"; then
	list_add_after $(hooks autobuild_prepare) apply_global_patches apply_hqa_patches
fi

if test x"${optee}" == x"yes"; then
	list_add_after $(hooks autobuild_prepare) platform_change_openwrt_config platform_enable_optee_config
	list_add_after $(hooks do_build) build_openwrt platform_build_optee_rpmb
	list_add_after $(hooks do_release) collect_feeds_buildinfo optee_release_binary
fi

if test x"${secure_boot}" == x"yes"; then
	list_add_after $(hooks autobuild_prepare) platform_change_openwrt_config platform_enable_security_config
fi

# Ayuda para flags adicionales
help_add_line "  hqa - Enable HQA test support."
help_add_line "  optee - Enable optee"
help_add_line "  secure_boot - Enable secure_boot, including signing, anti-rollback and firmware encryption"

# Función: Habilita paquetes esenciales y personalizados para tu build
platform_change_openwrt_config() {
	# Paquetes estándar de eMMC QVL
	openwrt_config_enable CONFIG_PACKAGE_fio
	openwrt_config_enable CONFIG_PACKAGE_lsblk
	openwrt_config_enable CONFIG_PACKAGE_sfdisk
	openwrt_config_enable CONFIG_PACKAGE_mmc-utils

	# Tus paquetes personalizados SIEMPRE presentes en la build
	openwrt_config_enable CONFIG_PACKAGE_dawn
	openwrt_config_enable CONFIG_PACKAGE_luci-app-fakemesh
	openwrt_config_enable CONFIG_PACKAGE_luci-app-autoreboot
	openwrt_config_enable CONFIG_PACKAGE_luci-app-cpu-status
	openwrt_config_enable CONFIG_PACKAGE_luci-app-temp-status
	openwrt_config_enable CONFIG_PACKAGE_luci-app-dawn2
	openwrt_config_enable CONFIG_PACKAGE_luci-app-usteer2
	openwrt_config_enable CONFIG_PACKAGE_kmod-ledtrig-netdev
}

# Función: Configuración avanzada para filogic y kernel
filogic_change_kernel_config() {
	kernel_config_enable CONFIG_EXTRA_FIRMWARE "\"airoha/EthMD32.dm.bin airoha/EthMD32.DSP.bin\""
	kernel_config_enable CONFIG_EXTRA_FIRMWARE_DIR "\"../../linux-firmware-20241110/\""
	kernel_config_enable CONFIG_AIR_EN8811H_PHY
	kernel_config_enable CONFIG_AIR_EN8811H_PHY_DEBUGFS
	kernel_config_enable CONFIG_MT753X_GSW
	kernel_config_enable CONFIG_AN8855_GSW
	kernel_config_disable CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE
	kernel_config_enable CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE
	kernel_config_enable CONFIG_CPU_FREQ_THERMAL
	kernel_config_enable CONFIG_THERMAL_EMULATION
	kernel_config_enable CONFIG_LEDS_PWM_MULTICOLOR
	kernel_config_enable CONFIG_SENSORS_PWM_FAN
	kernel_config_enable CONFIG_NET_DSA_MXL862
	kernel_config_enable CONFIG_NET_DSA_TAG_MXL862
	kernel_config_enable CONFIG_NET_DSA_TAG_MXL862_8021Q
	kernel_config_disable CONFIG_MEDIATEK_NETSYS_V2
	kernel_config_disable CONFIG_MEDIATEK_NETSYS_V3

	# ¡Fuerza el trigger netdev SIEMPRE en el kernel!
	kernel_config_enable CONFIG_LEDS_TRIGGER_NETDEV
}

# Función: Habilita soporte OP-TEE
platform_enable_optee_config() {
	openwrt_config_enable CONFIG_PACKAGE_optee-mediatek
	openwrt_config_enable CONFIG_OPTEE_TEST
	openwrt_config_enable CONFIG_OPTEE_FW_ENC_EARLY_TA
	openwrt_config_enable CONFIG_OPTEE_MTK_TEST
}

# Función: Compila optee con soporte RPMB (firmware seguro)
platform_build_optee_rpmb() {
	# Limpiar optee package
	exec_log "make -C \"${openwrt_root}\" package/mtk/optee-mediatek/clean V=s"

	# Añadir config de RPMB
	openwrt_config_enable CONFIG_OPTEE_RPMB_FS
	openwrt_config_enable CONFIG_OPTEE_RPMB_WRITE_KEY

	# make defconfig
	make_defconfig

	# Recompilar optee
	exec_log "make -C \"${openwrt_root}\" package/mtk/optee-mediatek/compile V=s"

	# Revertir config RPMB
	openwrt_config_disable CONFIG_OPTEE_RPMB_FS
	openwrt_config_disable CONFIG_OPTEE_RPMB_WRITE_KEY

	# make defconfig
	make_defconfig

	# Limpiar de nuevo optee
	exec_log "make -C \"${openwrt_root}\" package/mtk/optee-mediatek/clean V=s"
}

# Función: Habilita seguridad para secure boot
platform_enable_security_config() {
	openwrt_config_enable CONFIG_MTK_SECURE_BOOT
	openwrt_config_enable CONFIG_MTK_ANTI_ROLLBACK
	openwrt_config_enable CONFIG_MTK_FW_ENC
}

# Función: Copia binarios de optee al directorio de release
optee_release_binary() {
	local files=$(find "${openwrt_bin_dir}" -maxdepth 2 -name 'tee.bin')

	for file in ${files}; do
		local file_dir=$(dirname ${file})
		exec_log "cp -rf \"${file_dir}\" \"${ab_bin_release}\""
	done
}

# Función: Aplica parches HQA si está activo
apply_hqa_patches() {
	apply_patches "filogic/${openwrt_branch}/extra-data/hqa_patches" || return 1
}

# Función: Copia ficheros optee de fuentes externas al árbol openwrt
copy_optee_files() {
	copy_files "${openwrt_root}/../optee/optee_plat_mtk" "package/mtk/optee-mediatek/src/optee_plat_mtk"
	copy_files "${openwrt_root}/../optee/optee_apps" "package/mtk/optee-mediatek/src/optee_apps"
	copy_files "${openwrt_root}/../optee/optee_test_mtk" "package/mtk/optee-mediatek/src/optee_test_mtk"
}

# Función: Instala firmware de airoha
airoha_firmware_install() {
	exec_log "make -C \"${openwrt_root}\" V=${verbose} -j\$((\$(nproc) + 1)) package/firmware/linux-firmware/{clean,prepare}"
}

# Función: Elimina crypto packages conflictivos
remove_crypto_package () {
	exec_log "${openwrt_root}/scripts/feeds uninstall tops-tool"
}
